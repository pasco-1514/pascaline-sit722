name: Stage 2 - Deploy to Temporary Staging

on:
  workflow_run:
    workflows: ["Backend CI - Build and Push Images to ACR"]   # Run after Stage 1
    types:
      - completed

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  IMAGE_TAG: ${{ github.sha }}
  RESOURCE_GROUP: staging-rg
  LOCATION: eastus
  AKS_CLUSTER: staging-aks

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4

      # Authenticate to Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Provision staging infra (with Bicep/ARM/Terraform)
      - name: Create Staging Infra
        run: |
          az group create -n $RESOURCE_GROUP -l $LOCATION
          az aks create -g $RESOURCE_GROUP -n $AKS_CLUSTER --node-count 1 --enable-managed-identity --generate-ssh-keys
          az aks get-credentials -g $RESOURCE_GROUP -n $AKS_CLUSTER --overwrite-existing

      # Deploy services with kubectl (or Helm)
      - name: Deploy to AKS Staging
        run: |
          kubectl create namespace staging || true
          kubectl -n staging create deployment customer-service \
            --image=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} || \
            kubectl -n staging set image deployment/customer-service \
            customer-service=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

          kubectl -n staging expose deployment customer-service --type=LoadBalancer --port=80 || true

      # Run trivial acceptance tests (optional)
      - name: Run smoke tests
        run: |
          sleep 60
          kubectl get svc -n staging
          # curl or httpx test can go here

  destroy_staging:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: always()
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Destroy Staging Infra
        run: |
          az group delete -n $RESOURCE_GROUP -y --no-wait
