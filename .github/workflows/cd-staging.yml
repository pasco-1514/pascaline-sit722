name: Stage 2 - Deploy to Staging

on:
  workflow_run:
    workflows: ["Backend CI - Build and Push Images to ACR"]   # Runs after Stage 1
    types:
      - completed

env:
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
  IMAGE_TAG: ${{ github.sha }}
  RESOURCE_GROUP: staging-rg
  AKS_CLUSTER: staging-aks

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4

      # Authenticate to Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Connect to existing AKS
      - name: Connect to AKS
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $AKS_CLUSTER --overwrite-existing

      # Deploy workloads to staging namespace
      - name: Deploy to Staging
        run: |
          kubectl create namespace staging || true

          kubectl -n staging set image deployment/customer-service \
            customer-service=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} || \
            kubectl -n staging create deployment customer-service \
            --image=${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

          kubectl -n staging set image deployment/product-service \
            product-service=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} || \
            kubectl -n staging create deployment product-service \
            --image=${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

          kubectl -n staging set image deployment/order-service \
            order-service=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} || \
            kubectl -n staging create deployment order-service \
            --image=${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

          # Optionally expose services
          kubectl -n staging expose deployment customer-service --type=LoadBalancer --port=80 || true
          kubectl -n staging expose deployment product-service --type=LoadBalancer --port=80 || true
          kubectl -n staging expose deployment order-service --type=LoadBalancer --port=80 || true

      # Simple smoke test (optional)
      - name: Run Smoke Tests
        run: |
          kubectl get pods -n staging
          kubectl get svc -n staging

  destroy_staging:
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: always()
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $AKS_CLUSTER --overwrite-existing

      # Destroy only the namespace (not the cluster)
      - name: Delete Staging Workloads
        run: |
          kubectl delete namespace staging || true
